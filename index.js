const { Storage } = require('@google-cloud/storage');
const csv = require('csv-parser');
const os = require('os');
const fs = require('fs-extra');
const path = require('path');

const storage = new Storage();
//const sourceBucket = storage.bucket('cit41200-zdscofie-pdfmalware-sample');
const MalBucket = storage.bucket('cit41200-zdscofie-bad-files');
const BenBucket = storage.bucket('cit41200-zdscofie-benign-files');

const CSVBucket = storage.bucket('zdscofie-malpdf-csv-data');


exports.checkFiles = async (file, context) => {
    console.log("Called checkFiles Here");
    const csvFilename = 'PDFMalware2022.csv';
    const CSVfile = CSVBucket.file(csvFilename);
    const datafile = storage.bucket(file.bucket).file(file.name);

   // const Testfile = sourceBucket.file('0001dcb7233c85770732d138fcfe529f611b609de36e719542c1ec5dedbb508d');
   // const Testfile2 = sourceBucket.file('004f9c18920706c9ea0da780ce0cd5acbd4a47cd275d4b6d72068ebd2e654d97');

    CSVfile.createReadStream()
    .pipe(csv())
      .on('data', async (row) => {
        
        const filename = row.filename;
        const fileClass = row.Class;
        if(datafile.name == filename ){
        if (fileClass === 'Malicious') {
          console.log(`File ${filename} is malicious`);
            // Create a variable that holds the path to the 'local' version of the file

          const workingDir = path.join(os.tmpdir(), filename);
          const tempFilePath = path.join(workingDir, filename);
          console.log(`tempFilePath: ${tempFilePath}`);
            // Wait until the working directory is ready
          await fs.ensureDir(workingDir);
          console.log('Working directory is ready.');
            // Download the original file to the path on the 'local' VM
          await datafile.download({ destination: tempFilePath });
          console.log("File downloaded to local VM")
          await MalBucket.upload(tempFilePath);
          console.log("File Uploaded");


        } else if (fileClass === 'Benign') {
            console.log(`File ${filename} is benign`);
                        // Create a variable that holds the path to the 'local' version of the file

            const workingDir = path.join(os.tmpdir(), filename);
            const tempFilePath = path.join(workingDir, filename);
            console.log(`tempFilePath: ${tempFilePath}`);
                        // Wait until the working directory is ready

            await fs.ensureDir(workingDir);
            console.log('Working directory is ready.');
            await datafile.download({ destination: tempFilePath });
                        // Download the original file to the path on the 'local' VM

            console.log("File downloaded to local VM")
            await BenBucket.upload(tempFilePath);
            console.log("File Uploaded");
        
        
        } else {
          console.log(`File ${filename} does not have any detected class`);
        }
    }
      })
      .on('error', (err) => {
        console.error(`Error reading CSV file: ${err}`);
      })
      .on('end', () => {
        console.log('CSV file read complete');
      });
  };



